#pragma once
#include "rndobj/BaseMaterial.h"

enum MatProp {
    kMatPropMax = 0x3F
};

enum MatPropEditAction {
    /** "Use default value in Material; will be hidden in Material editor." */
    kPropDefault = 0,
    /** "Force value in Material; will be read-only in Material editor." */
    kPropForce = 1,
    /** "Allow property to be edited in Material" */
    kPropEdit = 2
};

// size 0x204
/** "MetaMaterials serve as Material templates" */
class MetaMaterial : public BaseMaterial {
public:
    virtual ~MetaMaterial();
    OBJ_CLASSNAME(MetaMaterial);
    OBJ_SET_TYPE(MetaMaterial);
    virtual DataNode Handle(DataArray *, bool);
    virtual bool SyncProperty(DataNode &, DataArray *, int, PropOp);
    virtual void Save(BinStream &);
    virtual void Copy(const Hmx::Object *, Hmx::Object::CopyType);
    virtual void Load(BinStream &);

protected:
    MetaMaterial();
    /** "Approximate combinations of shaders generated by this MetaMat.
        More shaders means more memory is used." */
    int CalcApproxNumShaders();
    void SetEditAction(MatProp, MatPropEditAction);

    std::vector<MatPropEditAction> mMatPropEditActions; // 0x1f8
};
