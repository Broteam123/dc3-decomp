#pragma once
#include "rndobj/BaseMaterial.h"

enum MatProp {
    kMatPropColor = 0,
    kMatPropAlpha = 1,
    kMatPropUseEnviron = 2,
    kMatPropPrelit = 3,
    kMatPropDiffuseTex = 4,
    kMatPropIntensify = 5,
    kMatPropTexWrap = 6,
    kMatPropTexGen = 7,
    kMatPropTexXfm = 8,
    kMatPropBlend = 9,
    kMatPropZMode = 10,
    kMatPropAlphaCut = 11,
    kMatPropAlphaWrite = 12,
    kMatPropNextPass = 13,
    kMatPropPointLights = 14,
    kMatPropFog = 15,
    kMatPropFadeout = 16,
    kMatPropColorAdjust = 17,
    kMatPropRecvProjLights = 18,
    kMatPropRecvPointCubeTex = 19,
    kMatPropPS3ForceTrilinear = 20,
    kMatPropPerPixelLit = 21,
    kMatPropEmissiveMultiplier = 22,
    kMatPropEmissiveMap = 23,
    kMatPropNormalMap = 24,
    kMatPropDeNormal = 25,
    kMatPropNormDetailMap = 26,
    kMatPropNormDetailStrength = 27,
    kMatPropNormDetailTiling = 28,
    kMatPropSpecularRGB = 29,
    kMatPropSpecularPower = 30,
    kMatPropSpecularMap = 31,
    kMatPropAnisotropy = 32,
    kMatPropRimRGB = 33,
    kMatPropRimPower = 34,
    kMatPropRimMap = 35,
    kMatPropRimLightUnder = 36,
    kMatPropEnvironMap = 37,
    kMatPropEnvironMapFalloff = 38,
    kMatPropEnvironMapSpecMask = 39,
    kMatPropRefractEnabled = 40,
    kMatPropRefractStrength = 41,
    kMatPropRefractNormalMap = 42,
    kMatPropShaderVariation = 43,
    kMatPropSpecular2RGB = 44,
    kMatPropSpecular2Power = 45,
    kMatPropFur = 46,
    kMatPropScreenAligned = 47,
    kMatPropCull = 48,
    kMatPropStencilMode = 49,
    kMatPropBloomMultiplier = 50,
    kMatPropNeverFitToSpline = 51,
    kMatPropAllowDistortionEffects = 52,
    kMatPropShockwaveMult = 53,
    kMatPropWorldProjectionTiling = 54,
    kMatPropWorldProjectionStartBlend = 55,
    kMatPropWorldProjectionEndBlend = 56,
    kMatPropDiffuseTex2 = 57,
    kMatPropForceAlphaWrite = 58,
    kMatPropMax = 64
};

enum MatPropEditAction {
    /** "Use default value in Material; will be hidden in Material editor." */
    kPropDefault = 0,
    /** "Force value in Material; will be read-only in Material editor." */
    kPropForce = 1,
    /** "Allow property to be edited in Material" */
    kPropEdit = 2,
    kNumEditActions = 3
};

// size 0x204
/** "MetaMaterials serve as Material templates" */
class MetaMaterial : public BaseMaterial {
public:
    OBJ_CLASSNAME(MetaMaterial);
    OBJ_SET_TYPE(MetaMaterial);
    virtual DataNode Handle(DataArray *, bool);
    virtual bool SyncProperty(DataNode &, DataArray *, int, PropOp);
    virtual void Save(BinStream &);
    virtual void Copy(const Hmx::Object *, Hmx::Object::CopyType);
    virtual void Load(BinStream &);

    bool IsEquivalent(MetaMaterial *);

protected:
    MetaMaterial();
    /** "Approximate combinations of shaders generated by this MetaMat.
        More shaders means more memory is used." */
    int CalcApproxNumShaders();
    void Init();
    void SetEditAction(MatProp, MatPropEditAction);

    std::vector<MatPropEditAction> mMatPropEditActions; // 0x1f8
};
