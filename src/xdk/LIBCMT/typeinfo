#pragma once
#include <cstring>
#include <cstddef>
#include <exception>

namespace std {

    class type_info {
    public:
        virtual ~type_info();
        size_t hash_code() const;
        bool operator==(const type_info &rhs) const;
        bool operator!=(const type_info &rhs) const;
        int before(const type_info &rhs) const;
        // size_t hash_code() const noexcept;
        const char *name() const { return m_Name; }
        const char *raw_name() const;

    private:
        // These constructors are normally deleted, but our C++ version
        // doesn't support that, so they're privated as a workaround
        type_info();
        type_info(const type_info &rhs); // cannot be copied
        type_info &operator=(const type_info &rhs); // cannot be copied

        const char *m_Name;
        size_t m_HashCode;
    };

    class bad_cast : public exception {
    public:
        virtual ~bad_cast() {}
        virtual const char *what() const { return "bad_cast"; }
    };

    class bad_typeid : public exception {
    public:
        virtual ~bad_typeid() {}
        virtual const char *what() const { return "bad_typeid"; }
    };

}
